import { useState, useEffect, useRef } from "react";
import { io } from "socket.io-client";
import { useNavigate } from "react-router-dom";
import SimplePeer from "simple-peer/simplepeer.min.js";
import { SOCKET_URL } from "./config-global";

const socket = io(SOCKET_URL);

const Dashboard = () => {
  const [callRequests, setCallRequests] = useState([]);
  const [shouldRedirect, setShouldRedirect] = useState(false);
  const [currentRequest, setCurrentRequest] = useState(null); // ذخیره درخواست فعلی برای ریدایرکت
  const navigate = useNavigate();
  const connectionRef = useRef(null); // اضافه کردن useRef

  useEffect(() => {
    socket.on("updateDashboard", (data) => {
      console.log("Dashboard data updated:", data); // Logging for debugging
      setCallRequests(data);
    });

    return () => {
      socket.off("updateDashboard");
    };
  }, []);

  useEffect(() => {
    if (shouldRedirect && currentRequest) {
      navigate(`/video/${currentRequest.id}`);
    }
  }, [shouldRedirect, currentRequest, navigate]);
  console.log("shouldRedirect :", shouldRedirect);
  console.log("currentRequest :", currentRequest);
  useEffect(() => {
    if (currentRequest) {
      console.log("Redirecting to /video:", currentRequest.id);
      navigate(`/video/${currentRequest.id}`);
    }
  }, [currentRequest, navigate]);
  const handleCall = (request) => {
    console.log("Starting call with request:", request);
    setCurrentRequest(request); // ذخیره درخواست فعلی

    const peer = new SimplePeer({
      initiator: true,
      trickle: false,
      stream: null,
    });

    peer.on("signal", (data) => {
      console.log("Signal generated by SimplePeer:", data);
      socket.emit("signal", { to: request.id, signalData: data });
    });

    // به محض اینکه سیگنال ایجاد شد ریدایرکت کنید
    navigate(`/video/${request.id}`);

    peer.on("connect", () => {
      console.log("Peer connection established with user:", request.id);
      socket.emit("adminCallUser", { id: request.id, name: request.name });
      setShouldRedirect(true);
    });

    peer.on("error", (err) => {
      console.error("Peer connection error:", err);
    });

    socket.on("signal", (data) => {
      console.log("Received signal from user:", data);
      peer.signal(data.signalData);
    });

    peer.on("close", () => {
      console.log("Peer connection closed");
    });

    connectionRef.current = peer;
  };

  return (
    <div className="min-h-screen bg-gray-100 p-4">
      <h1 className="text-2xl font-bold mb-4">Dashboard - Call Requests</h1>
      <div className="bg-white shadow-md rounded p-4">
        {callRequests.length === 0 ? (
          <p>No call requests yet.</p>
        ) : (
          <table className="w-full table-auto">
            <thead>
              <tr>
                <th className="px-4 py-2">ID</th>
                <th className="px-4 py-2">Name</th>
                <th className="px-4 py-2">Phone Number</th>
                <th className="px-4 py-2">Timestamp</th>
                <th className="px-4 py-2">Action</th>
              </tr>
            </thead>
            <tbody>
              {callRequests.map((request, index) => (
                <tr key={index}>
                  <td className="border px-4 py-2">{request.id}</td>
                  <td className="border px-4 py-2">{request.name}</td>
                  <td className="border px-4 py-2">{request.phoneNumber}</td>
                  <td className="border px-4 py-2">
                    {new Date(request.timestamp).toLocaleString()}
                  </td>
                  <td className="border px-4 py-2">
                    <button
                      onClick={() => handleCall(request)}
                      className="bg-blue-500 text-white px-4 py-2 rounded"
                    >
                      Call
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>
    </div>
  );
};

export default Dashboard;
